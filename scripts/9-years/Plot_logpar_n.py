""" Plots the cutoff energies of all models as a function of latitude, left and right separately. """

import numpy as np
import pyfits
import healpy
from matplotlib import pyplot
import healpylib as hlib
from iminuit import Minuit

import dio
from yaml import load
import auxil

#data_class = source 


lats = np.array([-55.0, -45.0, -35.0, -25.0, -15.0, -8.0, -4.0, 0.0, 4.0, 8.0, 15.0, 25.0, 35.0, 45.0, 55.0])

GALPROP_source = logpar_n_array = np.array( [[0.01981787432303267, -1.7060395491002527], [-0.7522396692363702, -0.9061440099838727], [-0.4374764278372755, -1.223056930854069], [-1.2099781349808645, -0.9702766507505661], [-0.21873099402063068, -0.9862075061665208], [-0.6747861925460024, -0.8329354191277778], [-0.24125243328116958, -5.180833161502594], [-0.5568349488082576, -2.900868682040913], [-0.3583638961207302, -0.637536835191007], [-0.42813814191867283, -0.782365980283748], [-1.6566575808370396, -1.8713384263490274], [-0.6381870979677968, -0.7936408247211838], [-0.3381499691674858, -1.2807747671376621], [-0.3522227086337787, -0.5248079766055113], [-5.281134970008817, -0.30235712067180714]] ).T # Restricted to positive beta

#GALPROP_source = np.array( [[0.020193204398083198, -1.7050281033646413], [-0.7553814904859283, -0.9079979757209884], [-0.44445046996646187, -1.222915419852999], [-1.2118312366535977, -0.972401622430998], [-0.9615656106379082, -0.9866235068380204], [-0.7077874743127229, -1.1666090108072247], [0.2580448417647462, -5.034039201082924], [0.19458503815044836, -2.9205442806340285], [0.20468947400458337, -0.24540062925194006], [0.12256536791934469, -0.7827272797015828], [-1.666858456585664, -1.8795328019273152], [-0.6384118149204406, -0.7940574357382184], [-0.5759523284815387, -1.2769115732947107], [-0.6173667731509174, -0.5260881130858588], [-5.292248336907553, -0.04964672385880109]] ).T

GALPROP_source_sgm = logpar_sgm_n_array = np.array( [[0.5112325037583276, 1.0514869309214485], [0.30857426267984517, 0.4983203277211356], [0.4390237525842545, 0.3190546178491411], [0.3271641473706815, 0.24980157496072766], [0.08855529231114169, 0.2210981171852218], [0.4325631245350316, 0.7967353709886325], [0.09935248078988539, 4.683166173693058], [0.13857481331528493, 0.3883754911678113], [0.1638442884206338, 1.0489097393943894], [0.3113896365851689, 0.3410287244438089], [0.5820753514071103, 0.48141664781315263], [0.3057712058758158, 0.4405557686987991], [1.3311528771889547, 0.5795826415989813], [3.103142570671222, 0.44201717600545026], [1.6032894755351697, 5.510767707562952]] ).T # Restricted to positive beta

#GALPROP_source_sgm = np.array( [[0.48154969683166854, 0.6918070280224384], [0.30282475109590923, 0.3557222460489713], [0.40244176327540154, 0.314931586888202], [0.3231063237129328, 0.24577097676285367], [0.2877251518654396, 0.21745172846305105], [0.42143300330014294, 0.7117423407962944], [0.17488765825080269, 14.50166212842322], [0.1922640455573775, 0.38317696417896197], [0.21084195301832695, 0.36723037028387845], [0.30947363664746885, 0.33502532772492855], [0.33976130054039644, 0.3091573158583658], [0.29690246655332864, 0.2857416474382236], [0.3404766577656782, 0.38723967849094143], [0.3760789033410196, 0.4152895190079945], [1.6010402101279404, 0.8772544088450762]] ).T

lowE_source_range0 =  np.array( [[0.254880207806775, -1.4122129326499895], [-0.7937615794731187, -0.8081089582565935], [-0.8867736990451527, -1.2237805662445573], [-1.1770879159552758, -1.249603860057942], [-0.9881370303620244, -1.137752288205181], [-0.7627437040142118, -0.828953019461467], [-0.22669135452892625, -0.8769281123220406], [0.03963299349748153, -21.230892965750993], [-0.21318855534809047, -1.1588460220955543], [-0.20460880842658455, -0.7965516056926153], [-0.7841599273444992, -1.515204495381882], [-0.5008919284229727, -0.4550494942704671], [-0.46156656558617926, -0.6443518428229151], [-0.7659351060803523, -0.4110284820087814], [-10.1645210397837, 0.7530038024013328]] ).T

lowE_source_range0_sgm = np.array( [[0.48563268094743706, 0.7023566009269455], [0.32085257101619413, 0.3556662121914227], [0.3551058367381741, 0.3286887272386483], [0.2928983732970837, 0.25578044693878], [0.23768829866377122, 0.21006482035264903], [0.28799766963112033, 0.3249901319269917], [0.1664041792130663, 0.30244508858930064], [0.16356056873522165, 10.29992079421851], [0.17652892926426533, 0.30133969793048276], [0.26296177959889483, 0.2816839696891277], [0.23373443724466175, 0.2453925002065388], [0.2873919481012473, 0.29826695676249465], [0.3363520500783008, 0.37069039301312895], [0.4072041942212125, 0.4752554068177938], [2.280793935822414, 0.7365371799539852]] ).T

boxes_source_range0 = np.array( [[0.04009137687886588, -1.0538746531407042], [-0.9252545136523364, -0.5885464457908967], [-0.6194889424955493, -1.1582618268793001], [-1.0769691560826686, -1.2129517719740783], [-0.970288636807253, -1.1986173586885838], [-0.39780919140846926, -0.7358854044181655], [-0.25229652249955353, -0.6661441841523166], [-0.09895516671665015, -0.40370595781434326], [-0.17982103378955355, -2.0004610436384835], [-0.5491175825299884, -0.8071367035577898], [-0.8308361947155896, -1.3315742459608042], [-0.4973859878716527, -0.3550677514510764], [-0.504859529800893, -0.295360624984501], [-0.8578509616990857, -0.4409916916847258], [-0.20438951421332402, 1.2398602809663162]] ).T

boxes_source_range0_sgm = np.array( [[0.5166736210736791, 0.7040456830331311], [0.3717640079110428, 0.3819997535649472], [0.3377470550505962, 0.37003473572828643], [0.3319707253762284, 0.28969497801484806], [0.2817719112352593, 0.24399373034777677], [0.30771225698009347, 0.3607586167673296], [0.1824460769510979, 0.2588171611098625], [0.14880910854290796, 0.25221562804786074], [0.21602624442359636, 0.39436830071392276], [0.33804393512093267, 0.319346319948953], [0.2654024361746814, 0.2429239994700977], [0.25753351584986384, 0.2945381373227975], [0.29628958791870647, 0.4077709050579087], [0.4333848657961337, 0.5818423586935765], [0.6690551877043475, 0.7330412534734209]] ).T

data_source = np.array( [[-0.45045643245520206, -1.1007861873834948], [-0.779519538318318, -0.8618563054598094], [-0.7812238583565777, -1.0193676919178514], [-0.9368599071156744, -0.8209864074901879], [-0.736562208586016, -0.7741081879059506], [-0.6144759845634502, -0.6193936034143421], [-0.24130118499496622, -0.4284978962353906], [-0.17101027053414142, -0.5016513205609339], [-0.3337075369686768, -0.44077890073677595], [-0.3720342207286602, -0.6136834883264732], [-0.6165911234328962, -0.8175265380173252], [-0.6181189334751922, -0.5934806365908687], [-0.66882310637426, -0.8246080540831423], [-0.7681302181578038, -0.70811491555127], [-0.8080362705036228, -0.7613815284161392]] ).T

data_source_sgm =  np.array( [[0.3141504084038146, 0.362448506352139], [0.22525756721504622, 0.24751890915140615], [0.2071513145532606, 0.21604365915299822], [0.18800670827142674, 0.17105657770704033], [0.1569576876350262, 0.1459756310582891], [0.1907861430995055, 0.19834943602688862], [0.11464610294065955, 0.14121647713397145], [0.09632625158629798, 0.12121569821501284], [0.11421264209330428, 0.12864806638661014], [0.16857334106902622, 0.17249845508883282], [0.1282796614199147, 0.13989079579787253], [0.16427061495470982, 0.1580912981443871], [0.19403437117949038, 0.20454947569557233], [0.23310816972700735, 0.2524204585671214], [0.3538267301437499, 0.3337672792921382]] ).T

########################################################################################################################## Right

auxil.setup_figure_pars(plot_type = 'spectrum')
fig = pyplot.figure()

pyplot.errorbar(lats, data_source[0], data_source_sgm[0], label = "Data", color = "black", linewidth = 1.3, marker = 's')
pyplot.errorbar(lats, lowE_source_range0[0], lowE_source_range0_sgm[0],  label = "LowE", color = "blue", linewidth = 1.3, marker = 'o')
pyplot.errorbar(lats, boxes_source_range0[0], boxes_source_range0_sgm[0], label = "Rectangles", color = "red", linewidth = 1.3, marker = 'D')
pyplot.errorbar(lats, GALPROP_source[0], GALPROP_source_sgm[0],  label = "GALPROP", color = "green", linewidth = 1.3, marker = '<')

lg = pyplot.legend(loc='upper right', ncol=1, fontsize = 'medium')
lg.get_frame().set_linewidth(0)
pyplot.grid(True)
pyplot.xlabel(r'$b\ \mathrm{[deg]}$')
pyplot.ylabel(r'$2 - n(500\, \mathrm{GeV})$')

ax = fig.add_subplot(111)
textstr = r"$\ell \in (-10^\circ,0^\circ)$"
ax.text(0.03, 0.97, textstr, transform=ax.transAxes, fontsize = 20, verticalalignment='top')

pyplot.title("West")

plot_dir = '../../plots/Plots_9-year/Low_energy_range0/'

name = 'LogParabola_n(500GeV)_l_in_(-10,0).pdf'
fn = plot_dir + name
pyplot.ylim(-1.5, 1.)

pyplot.savefig(fn, format = 'pdf')


########################################################################################################################## Left


fig = pyplot.figure()

pyplot.errorbar(lats, data_source[1], data_source_sgm[1], label = "Data", color = "black", linewidth = 1.3, marker = 's')
pyplot.errorbar(lats,lowE_source_range0[1], lowE_source_range0_sgm[1],  label = "LowE", color = "blue", linewidth = 1.3, marker = 'o')
pyplot.errorbar(lats, boxes_source_range0[1], boxes_source_range0_sgm[1], label = "Rectangles", color = "red", linewidth = 1.3, marker = 'D')
pyplot.errorbar(lats, GALPROP_source[1], GALPROP_source_sgm[1],  label = "GALPROP", color = "green", linewidth = 1.3, marker = '<')

lg = pyplot.legend(loc='upper right', ncol=1, fontsize = 'medium')
lg.get_frame().set_linewidth(0)
pyplot.grid(True)
pyplot.xlabel(r'$b\ \mathrm{[deg]}$')
pyplot.ylabel(r'$2 - n(500\, \mathrm{GeV})$')

ax = fig.add_subplot(111)
textstr = r"$\ell \in (0^\circ,10^\circ)$"
ax.text(0.03, 0.97, textstr, transform=ax.transAxes, fontsize = 20, verticalalignment='top')

pyplot.title("East")

plot_dir = '../../plots/Plots_9-year/Low_energy_range0/'

name = 'LogParabola_n(500GeV)_l_in_(0,10).pdf'
fn = plot_dir + name 
#pyplot.yscale('log')
pyplot.ylim(-1.5, 1.)
auxil.setup_figure_pars(plot_type = 'spectrum')
pyplot.savefig(fn, format = 'pdf')
